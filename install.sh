#!/bin/bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/install.log"
INVENTORY_FILE=""
WIZARD_MODE=true
VERBOSE=false
AI_ERROR_HANDLING=true
PREFLIGHT_DISCOVERY=true
DISCOVERY_OUTPUT_DIR="${SCRIPT_DIR}/discovery"
SSH_KEY_PATH="~/.ssh/id_rsa"
USERNAME="ubuntu"

# Logging function
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${GREEN}[INFO]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
        "DEBUG")
            if [[ "$VERBOSE" == "true" ]]; then
                echo -e "${BLUE}[DEBUG]${NC} $message"
            fi
            ;;
    esac
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Print banner
print_banner() {
    cat << 'EOF'
╔══════════════════════════════════════════════════════════════╗
║                Kubernetes RAG Installer                      ║
║                                                              ║
║  Automated Kubernetes + GPU + NVIDIA RAG Blueprint Setup    ║
╚══════════════════════════════════════════════════════════════╝
EOF
}

# Check prerequisites
check_prerequisites() {
    log "INFO" "Checking prerequisites..."
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        log "ERROR" "This script should not be run as root"
        exit 1
    fi
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        log "ERROR" "Python 3 is required but not installed"
        exit 1
    fi
    
    # Check Python dependencies for AI error handling
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        log "INFO" "Checking AI error handling dependencies..."
        python3 -c "import openai" 2>/dev/null || {
            log "INFO" "Installing OpenAI Python package..."
            pip3 install openai
        }
    fi
    
    # Check Ansible
    if ! command -v ansible &> /dev/null; then
        log "INFO" "Installing Ansible..."
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt-get install -y ansible
    fi
    
    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        log "INFO" "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    fi
    
    # Check helm
    if ! command -v helm &> /dev/null; then
        log "INFO" "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    fi
    
    log "INFO" "Prerequisites check completed"
}

# Preflight discovery
run_preflight_discovery() {
    log "INFO" "Starting preflight hardware discovery..."
    
    # Check if preflight checker exists
    local preflight_checker="${SCRIPT_DIR}/utils/preflight.sh"
    if [[ ! -f "$preflight_checker" ]]; then
        log "ERROR" "Preflight checker not found: $preflight_checker"
        exit 1
    fi
    
    # Make preflight checker executable
    chmod +x "$preflight_checker"
    
    # Run preflight discovery
    log "INFO" "Running hardware discovery..."
    if "$preflight_checker" --output-dir "$DISCOVERY_OUTPUT_DIR"; then
        log "INFO" "✓ Preflight discovery completed successfully"
        
        # Check if inventory was generated
        local generated_inventory="${DISCOVERY_OUTPUT_DIR}/inventory.yml"
        if [[ -f "$generated_inventory" ]]; then
            INVENTORY_FILE="$generated_inventory"
            log "INFO" "Using generated inventory: $INVENTORY_FILE"
            
            # Display discovery results
            local report_file="${DISCOVERY_OUTPUT_DIR}/discovery_report.md"
            if [[ -f "$report_file" ]]; then
                echo -e "\n${BLUE}=== Hardware Discovery Results ===${NC}"
                cat "$report_file"
                echo ""
            fi
            
            return 0
        else
            log "ERROR" "Inventory file not generated by preflight discovery"
            return 1
        fi
    else
        log "ERROR" "Preflight discovery failed"
        return 1
    fi
}

# Wizard interface
run_wizard() {
    log "INFO" "Starting interactive wizard..."
    
    echo -e "\n${BLUE}=== Kubernetes RAG Installer Wizard ===${NC}\n"
    
    # Get SSH key path
    read -p "Enter SSH private key path [~/.ssh/id_rsa]: " ssh_key_path
    ssh_key_path=${ssh_key_path:-~/.ssh/id_rsa}
    
    if [[ ! -f "$ssh_key_path" ]]; then
        log "ERROR" "SSH key not found: $ssh_key_path"
        exit 1
    fi
    
    # Get master node details
    echo -e "\n${YELLOW}Master Node Configuration:${NC}"
    read -p "Master node hostname [master1]: " master_hostname
    master_hostname=${master_hostname:-master1}
    
    read -p "Master node IP address: " master_ip
    if [[ -z "$master_ip" ]]; then
        log "ERROR" "Master node IP is required"
        exit 1
    fi
    
    read -p "SSH username [ubuntu]: " ssh_user
    ssh_user=${ssh_user:-ubuntu}
    
    # Get worker nodes
    echo -e "\n${YELLOW}Worker Nodes Configuration:${NC}"
    read -p "Number of worker nodes [2]: " num_workers
    num_workers=${num_workers:-2}
    
    workers=()
    for i in $(seq 1 $num_workers); do
        read -p "Worker $i hostname [worker$i]: " worker_hostname
        worker_hostname=${worker_hostname:-worker$i}
        
        read -p "Worker $i IP address: " worker_ip
        if [[ -z "$worker_ip" ]]; then
            log "ERROR" "Worker $i IP is required"
            exit 1
        fi
        
        read -p "Worker $i has GPU? (y/n) [n]: " has_gpu
        has_gpu=${has_gpu:-n}
        
        workers+=("$worker_hostname:$worker_ip:$has_gpu")
    done
    
    # Generate inventory file
    generate_inventory "$ssh_key_path" "$master_hostname" "$master_ip" "$ssh_user" "${workers[@]}"
    
    log "INFO" "Wizard completed. Inventory file generated: $INVENTORY_FILE"
}

# Generate inventory file
generate_inventory() {
    local ssh_key_path=$1
    local master_hostname=$2
    local master_ip=$3
    local ssh_user=$4
    shift 4
    local workers=("$@")
    
    INVENTORY_FILE="${SCRIPT_DIR}/inventory.yml"
    
    cat > "$INVENTORY_FILE" << EOF
all:
  children:
    kube_control_plane:
      hosts:
        ${master_hostname}:
          ansible_host: ${master_ip}
          ansible_user: ${ssh_user}
          ansible_ssh_private_key_file: ${ssh_key_path}
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    kube_node:
      hosts:
EOF
    
    for worker in "${workers[@]}"; do
        IFS=':' read -r hostname ip gpu_enabled <<< "$worker"
        cat >> "$INVENTORY_FILE" << EOF
        ${hostname}:
          ansible_host: ${ip}
          ansible_user: ${ssh_user}
          ansible_ssh_private_key_file: ${ssh_key_path}
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
          gpu_enabled: ${gpu_enabled}
EOF
    done
    
    cat >> "$INVENTORY_FILE" << EOF
    k8s_cluster:
      children:
        kube_control_plane:
        kube_node:
      vars:
        ansible_python_interpreter: /usr/bin/python3
        ansible_user: ${ssh_user}
        ansible_ssh_private_key_file: ${ssh_key_path}
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
EOF
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --inventory)
                INVENTORY_FILE="$2"
                WIZARD_MODE=false
                shift 2
                ;;
            --preflight)
                PREFLIGHT_DISCOVERY=true
                shift
                ;;
            --no-preflight)
                PREFLIGHT_DISCOVERY=false
                shift
                ;;
            --discovery-output)
                DISCOVERY_OUTPUT_DIR="$2"
                shift 2
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --no-ai)
                AI_ERROR_HANDLING=false
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Show help
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Options:
    --inventory FILE        Use existing inventory file
    --preflight             Enable preflight hardware discovery (default)
    --no-preflight          Disable preflight hardware discovery
    --discovery-output DIR  Output directory for discovery results
    --verbose               Enable verbose logging
    --no-ai                 Disable AI error handling
    --help                  Show this help message

Examples:
    $0                                    # Run interactive wizard with preflight discovery
    $0 --inventory my-inventory.yml      # Use existing inventory
    $0 --preflight                       # Run with hardware discovery
    $0 --no-preflight                    # Run without hardware discovery
    $0 --verbose                         # Run with verbose logging
    $0 --no-ai                          # Run without AI error handling
    $0 --discovery-output ./my-discovery # Custom discovery output directory
EOF
}

# Main installation process
main_install() {
    log "INFO" "Starting Kubernetes RAG installation..."
    
    # Source AI error handling functions
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        source "${SCRIPT_DIR}/utils/error_handler.sh"
        log "INFO" "AI error handling enabled"
    fi
    
    # Step 1: Deploy Kubernetes cluster
    log "INFO" "Step 1/4: Deploying Kubernetes cluster with Kubespray..."
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        execute_with_ai_error_handling "Kubespray cluster deployment" \
            "ansible-playbook -i \"$INVENTORY_FILE\" playbooks/01-kubespray.yml -v" \
            "Kubernetes cluster deployment with Kubespray"
    else
        ansible-playbook -i "$INVENTORY_FILE" playbooks/01-kubespray.yml -v
    fi
    
    # Step 2: Install GPU Operator
    log "INFO" "Step 2/4: Installing NVIDIA GPU Operator..."
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        execute_with_ai_error_handling "NVIDIA GPU Operator installation" \
            "ansible-playbook -i \"$INVENTORY_FILE\" playbooks/02-gpu-operator.yml -v" \
            "NVIDIA GPU Operator deployment"
    else
        ansible-playbook -i "$INVENTORY_FILE" playbooks/02-gpu-operator.yml -v
    fi
    
    # Step 3: Deploy NVIDIA RAG Blueprint
    log "INFO" "Step 3/4: Deploying NVIDIA RAG Blueprint..."
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        execute_with_ai_error_handling "NVIDIA RAG Blueprint deployment" \
            "ansible-playbook -i \"$INVENTORY_FILE\" playbooks/03-rag-blueprint.yml -v" \
            "NVIDIA RAG Blueprint deployment"
    else
        ansible-playbook -i "$INVENTORY_FILE" playbooks/03-rag-blueprint.yml -v
    fi
    
    # Step 4: Validate installation
    log "INFO" "Step 4/4: Validating installation..."
    if [[ "$AI_ERROR_HANDLING" == "true" ]]; then
        execute_with_ai_error_handling "Installation validation" \
            "ansible-playbook -i \"$INVENTORY_FILE\" playbooks/04-validate.yml -v" \
            "Final installation validation"
        
        # Run AI-powered cluster diagnostics
        log "INFO" "Running AI-powered cluster diagnostics..."
        run_cluster_diagnostics
    else
        ansible-playbook -i "$INVENTORY_FILE" playbooks/04-validate.yml -v
    fi
    
    log "INFO" "Installation completed successfully!"
    show_access_info
}

# Show access information
show_access_info() {
    local master_ip=$(grep -A1 "kube_control_plane:" "$INVENTORY_FILE" | grep "ansible_host" | head -1 | awk '{print $2}')
    
    cat << EOF

╔══════════════════════════════════════════════════════════════╗
║                    Installation Complete!                    ║
╚══════════════════════════════════════════════════════════════╝

🎉 Your Kubernetes RAG cluster is now ready!

📋 Access Information:
   • RAG Playground: http://${master_ip}:30081
   • Default credentials: admin/admin
   • Kubernetes Dashboard: http://${master_ip}:30000

🔧 Management Commands:
   • Check cluster status: kubectl get nodes
   • Check GPU operator: kubectl get pods -n gpu-operator-resources
   • Check RAG services: kubectl get pods -n rag-system
   • Check observability: kubectl get pods -n observability

📊 Monitoring & Observability:
   • Grafana: http://${master_ip}:30671 (admin/admin)
   • Jaeger (Tracing): http://${master_ip}:30668
   • Zipkin (Tracing): http://${master_ip}:30669
   • Attu (Milvus UI): http://${master_ip}:30670

📝 Logs available at: $LOG_FILE

EOF
}

# Main execution
main() {
    print_banner
    
    # Parse arguments
    parse_args "$@"
    
    # Check prerequisites
    check_prerequisites
    
    # Run preflight discovery if enabled and no inventory provided
    if [[ "$PREFLIGHT_DISCOVERY" == "true" && "$WIZARD_MODE" == "true" ]]; then
        log "INFO" "Preflight discovery enabled. Starting hardware discovery..."
        if run_preflight_discovery; then
            log "INFO" "✓ Preflight discovery completed. Using discovered inventory."
            WIZARD_MODE=false  # Skip wizard since we have inventory from discovery
        else
            log "WARN" "Preflight discovery failed. Falling back to wizard mode."
        fi
    fi
    
    # Run wizard if no inventory provided
    if [[ "$WIZARD_MODE" == "true" ]]; then
        run_wizard
    elif [[ ! -f "$INVENTORY_FILE" ]]; then
        log "ERROR" "Inventory file not found: $INVENTORY_FILE"
        exit 1
    fi
    
    # Start installation
    main_install
}

# Run main function with all arguments
main "$@"
