apiVersion: v1
kind: ConfigMap
metadata:
  name: populate-rag-script
  namespace: default
data:
  populate_rag.py: |
    import numpy as np
    from pymilvus import connections, Collection, FieldSchema, CollectionSchema, DataType
    
    # Connect to Milvus
    connections.connect('default', host='milvus', port='19530')
    print('Connected to Milvus')
    
    # Sample documents for RAG testing
    sample_documents = [
        "The NVIDIA RAG Blueprint is a comprehensive solution for building Retrieval-Augmented Generation systems. It combines vector databases with large language models to enable intelligent document search and question answering.",
        "Vector databases like Milvus store high-dimensional embeddings that represent the semantic meaning of documents. These embeddings enable similarity search across large document collections.",
        "GPU acceleration significantly improves the performance of embedding generation and vector search operations. NVIDIA GPUs are optimized for these compute-intensive tasks.",
        "Document ingestion involves converting text into vector embeddings using embedding models. These embeddings capture the semantic meaning of the content for efficient retrieval.",
        "The RAG pipeline combines retrieval from vector databases with generation from language models. This approach enables accurate, context-aware responses to user queries.",
        "Embedding models convert text into dense vector representations. Popular models include sentence-transformers, OpenAI embeddings, and NVIDIA's embedding models.",
        "Vector similarity search finds the most relevant documents based on semantic similarity rather than keyword matching. This enables more intelligent document retrieval.",
        "The NVIDIA RAG Blueprint includes components for document processing, embedding generation, vector storage, and query processing. It provides an end-to-end solution for RAG applications."
    ]
    
    # Generate embeddings (1536 dimensions to match common embedding models)
    embeddings = [np.random.rand(1536).tolist() for _ in sample_documents]
    
    # Populate hammerspace_docs collection
    try:
        collection = Collection("hammerspace_docs")
        collection.load()
        
        # Prepare data in the expected format
        data = [
            embeddings,  # vector field
            ["test_source"] * len(sample_documents),  # source field
            [{"type": "document", "page": i+1} for i in range(len(sample_documents))],  # content_metadata
            sample_documents  # text field
        ]
        
        collection.insert(data)
        collection.flush()
        print(f'Inserted {len(sample_documents)} documents into hammerspace_docs')
        print(f'hammerspace_docs now contains {collection.num_entities} entities')
        
    except Exception as e:
        print(f'Error populating hammerspace_docs: {e}')
    
    # Populate metadata_schema collection
    try:
        collection = Collection("metadata_schema")
        collection.load()
        
        # Create metadata entries for the collections
        metadata_entries = [
            {
                "collection_name": "hammerspace_docs",
                "description": "Main document collection for RAG system",
                "vector_dimension": 1536,
                "embedding_model": "nvidia/embed-qa-4"
            },
            {
                "collection_name": "metadata_schema", 
                "description": "Metadata schema collection",
                "vector_dimension": 1536,
                "embedding_model": "nvidia/embed-qa-4"
            }
        ]
        
        # Generate embeddings for metadata
        metadata_embeddings = [np.random.rand(1536).tolist() for _ in metadata_entries]
        
        data = [
            list(range(len(metadata_entries))),  # pk field
            [entry["collection_name"] for entry in metadata_entries],  # collection_name
            metadata_embeddings,  # vector field
            metadata_entries  # metadata_schema field
        ]
        
        collection.insert(data)
        collection.flush()
        print(f'Inserted {len(metadata_entries)} metadata entries into metadata_schema')
        print(f'metadata_schema now contains {collection.num_entities} entities')
        
    except Exception as e:
        print(f'Error populating metadata_schema: {e}')
    
    # Verify all collections
    from pymilvus import list_collections
    collections = list_collections()
    print(f'\nFinal collections status:')
    for col_name in collections:
        try:
            collection = Collection(col_name)
            collection.load()
            num_entities = collection.num_entities
            print(f'  {col_name}: {num_entities} entities')
        except Exception as e:
            print(f'  {col_name}: Error - {e}')
    
    print('âœ“ RAG collections populated successfully!')
---
apiVersion: v1
kind: Pod
metadata:
  name: populate-rag-collections
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: populate
    image: python:3.9-slim
    command: ["sh", "-c", "pip install pymilvus numpy && python3 /app/populate_rag.py"]
    volumeMounts:
    - name: script-volume
      mountPath: /app
  volumes:
  - name: script-volume
    configMap:
      name: populate-rag-script
