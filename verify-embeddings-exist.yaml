apiVersion: v1
kind: Pod
metadata:
  name: verify-embeddings-exist
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: test
    image: python:3.9-slim
    command: ["sh", "-c"]
    args:
      - |
        pip install pymilvus requests
        python3 -c "
        from pymilvus import connections, Collection, utility
        import requests
        
        print('=== Verifying Embeddings in Vector Database ===')
        
        # Connect to Milvus
        try:
            connections.connect('default', host='milvus', port='19530')
            print('✓ Connected to Milvus')
            
            # List all collections
            collections = utility.list_collections()
            print(f'Found {len(collections)} collections: {collections}')
            
            # Check each collection
            for col_name in collections:
                try:
                    collection = Collection(col_name)
                    collection.load()
                    num_entities = collection.num_entities
                    print(f'\\nCollection \"{col_name}\":')
                    print(f'  - Entities: {num_entities}')
                    
                    if num_entities > 0:
                        # Get schema info
                        schema = collection.schema
                        print(f'  - Schema fields:')
                        for field in schema.fields:
                            print(f'    * {field.name}: {field.dtype}')
                        
                        # Sample a few entities to verify they have embeddings
                        if num_entities > 0:
                            sample_size = min(3, num_entities)
                            results = collection.query(
                                expr='', 
                                output_fields=['*'], 
                                limit=sample_size
                            )
                            print(f'  - Sample entities (first {sample_size}):')
                            for i, entity in enumerate(results):
                                print(f'    Entity {i+1}:')
                                for field_name, value in entity.items():
                                    if isinstance(value, list) and len(value) > 10:
                                        print(f'      {field_name}: [{len(value)}-dimensional vector]')
                                    else:
                                        print(f'      {field_name}: {str(value)[:100]}...')
                    
                    collection.release()
                    
                except Exception as e:
                    print(f'Error checking collection {col_name}: {e}')
            
            print('\\n✓ Embedding verification complete')
            
        except Exception as e:
            print(f'✗ Failed to connect to Milvus: {e}')
        
        # Also check ingestor server status
        print('\\n=== Checking Ingestor Server Status ===')
        try:
            ingestor_url = 'http://ingestor-server:8082'
            
            # Get collections from ingestor
            collections_response = requests.get(f'{ingestor_url}/collections', timeout=10)
            if collections_response.status_code == 200:
                collections_data = collections_response.json()
                print(f'Ingestor collections: {collections_data}')
            else:
                print(f'Ingestor collections error: {collections_response.text}')
            
            # Get documents from ingestor
            docs_response = requests.get(f'{ingestor_url}/documents', timeout=10)
            if docs_response.status_code == 200:
                docs_data = docs_response.json()
                print(f'Ingestor documents: {docs_data}')
            else:
                print(f'Ingestor documents error: {docs_response.text}')
                
        except Exception as e:
            print(f'Ingestor server check failed: {e}')
        
        print('\\n=== Verification Complete ===')
        "
