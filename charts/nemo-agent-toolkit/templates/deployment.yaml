apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nemo-agent-toolkit.fullname" . }}
  labels:
    {{- include "nemo-agent-toolkit.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "nemo-agent-toolkit.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nemo-agent-toolkit.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nemo-agent-toolkit.serviceAccountName" . }}
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash"]
          args:
            - -c
            - |
              set -e
              echo "Installing NeMo Agent Toolkit..."
              pip install --upgrade pip
              pip install nvidia-nat
              
              echo "Creating workflow directory..."
              mkdir -p /app/workflows /app/cache
              
              echo "Writing workflow configuration..."
              cat > /app/workflows/workflow.yml << 'EOF'
              {{ .Values.nemoAgent.workflow.config | nindent 14 }}
              EOF
              
              echo "Starting NeMo Agent Toolkit server..."
              echo "NeMo Agent Toolkit is ready!"
              echo "You can now run workflows using: nat run --config_file /app/workflows/workflow.yml --input 'your query here'"
              
              # Keep the container running
              tail -f /dev/null
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            {{- if .Values.mcp.enabled }}
            - name: mcp
              containerPort: {{ .Values.mcp.port }}
              protocol: TCP
            {{- end }}
            {{- if .Values.observability.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.observability.metrics.port }}
              protocol: TCP
            {{- end }}
          env:
            {{- range $key, $value := .Values.nemoAgent.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if and .Values.nemoAgent.nvidiaApiKey (not (hasKey .Values.nemoAgent.env "NVIDIA_API_KEY")) }}
            - name: NVIDIA_API_KEY
              value: {{ .Values.nemoAgent.nvidiaApiKey | quote }}
            {{- end }}
            {{- if .Values.observability.otel.enabled }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ .Values.observability.otel.endpoint | quote }}
            - name: OTEL_SERVICE_NAME
              value: {{ .Values.observability.tracing.serviceName | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- range .Values.nemoAgent.volumes }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /app/data
            {{- end }}
      volumes:
        {{- range .Values.nemoAgent.volumes }}
        - name: {{ .name }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "nemo-agent-toolkit.fullname" . }}-data
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
