apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-embedding-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-embedding-service
  template:
    metadata:
      labels:
        app: cpu-embedding-service
    spec:
      containers:
      - name: embedding
        image: python:3.9-slim
        ports:
        - containerPort: 8000
        command: ["python3", "-c"]
        args:
          - |
            import subprocess
            import sys
            subprocess.check_call([sys.executable, "-m", "pip", "install", "fastapi", "uvicorn", "numpy", "scikit-learn"])
            
            from fastapi import FastAPI
            from pydantic import BaseModel
            import uvicorn
            import numpy as np
            from sklearn.feature_extraction.text import TfidfVectorizer
            from sklearn.decomposition import TruncatedSVD
            
            app = FastAPI()
            
            # Simple TF-IDF based embedding
            vectorizer = TfidfVectorizer(max_features=2048, stop_words='english')
            svd = TruncatedSVD(n_components=384)
            
            class EmbeddingRequest(BaseModel):
                input: list[str]
                model: str = "cpu-embedding-v1"
            
            class EmbeddingResponse(BaseModel):
                object: str = "list"
                data: list[dict]
                model: str
                usage: dict
            
            @app.post("/v1/embeddings")
            async def create_embeddings(request: EmbeddingRequest):
                # Simple TF-IDF + SVD embedding
                tfidf_matrix = vectorizer.fit_transform(request.input)
                embeddings = svd.fit_transform(tfidf_matrix)
                
                data = []
                for i, embedding in enumerate(embeddings):
                    data.append({
                        "object": "embedding",
                        "index": i,
                        "embedding": embedding.tolist()
                    })
                
                return EmbeddingResponse(
                    data=data,
                    model=request.model,
                    usage={
                        "prompt_tokens": sum(len(text.split()) for text in request.input),
                        "total_tokens": sum(len(text.split()) for text in request.input)
                    }
                )
            
            @app.get("/health")
            async def health():
                return {"status": "healthy"}
            
            @app.get("/v1/models")
            async def models():
                return {
                    "object": "list",
                    "data": [{
                        "id": "cpu-embedding-v1",
                        "object": "model",
                        "created": 1234567890,
                        "owned_by": "custom"
                    }]
                }
            
            if __name__ == "__main__":
                uvicorn.run(app, host="0.0.0.0", port=8000)
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: cpu-embedding-service
  namespace: default
spec:
  selector:
    app: cpu-embedding-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP