apiVersion: v1
kind: Pod
metadata:
  name: api-proxy
  namespace: default
  labels:
    app: api-proxy
spec:
  restartPolicy: Always
  containers:
  - name: api-proxy
    image: python:3.11-slim
    ports:
    - containerPort: 8080
    command: ["sh", "-c"]
    args:
      - |
        echo "Installing dependencies..."
        pip install fastapi uvicorn requests
        echo "Starting API proxy..."
        python3 -c "
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import requests
import json

app = FastAPI(title='RAG API Proxy', version='1.0.0')

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=['*'],
    allow_headers=['*'],
)

@app.get('/health')
async def health():
    return {'status': 'healthy', 'service': 'api-proxy'}

@app.post('/v1/generate')
async def generate(request: dict):
    try:
        # Forward the request to the backend
        response = requests.post(
            'http://rag-server:8081/v1/generate',
            json=request,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise HTTPException(status_code=response.status_code, detail=response.text)
            
    except requests.exceptions.Timeout:
        raise HTTPException(status_code=504, detail='Backend timeout')
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get('/')
async def root():
    return {
        'service': 'RAG API Proxy',
        'description': 'Public API proxy for the RAG backend',
        'endpoints': {
            'health': '/health',
            'generate': '/v1/generate'
        }
    }

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8080)
"
---
apiVersion: v1
kind: Service
metadata:
  name: api-proxy-service
  namespace: default
spec:
  selector:
    app: api-proxy
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 32509
  type: NodePort
