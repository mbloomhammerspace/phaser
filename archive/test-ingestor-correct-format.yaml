apiVersion: v1
kind: Pod
metadata:
  name: test-ingestor-correct-format
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: test
    image: python:3.9-slim
    command: ["sh", "-c"]
    args:
      - |
        pip install requests
        python3 -c "
        import requests
        import json
        
        INGESTOR_URL = 'http://ingestor-server:8082'
        
        print('=== Testing Ingestor Server with Correct Format ===')
        
        # Test with data field
        test_payloads = [
            {
                'data': 'This is a test document for embedding generation and ingestion.'
            },
            {
                'documents': [
                    {
                        'text': 'This is test document 1 for embedding generation.',
                        'metadata': {'source': 'test_1.pdf'}
                    },
                    {
                        'text': 'This is test document 2 for embedding generation.',
                        'metadata': {'source': 'test_2.pdf'}
                    }
                ]
            },
            {
                'documents': [
                    'This is test document 1 for embedding generation.',
                    'This is test document 2 for embedding generation.'
                ]
            }
        ]
        
        for i, payload in enumerate(test_payloads):
            try:
                print(f'\\nTesting payload {i+1}:')
                print(f'  Payload: {json.dumps(payload, indent=2)}')
                
                response = requests.post(f'{INGESTOR_URL}/documents', json=payload, timeout=30)
                print(f'  Status: {response.status_code}')
                
                if response.status_code in [200, 201, 202]:
                    print(f'  âœ“ Success! Response: {response.json()}')
                    
                    # Check if embeddings were generated by listing documents
                    print('\\n  Checking if embeddings were created...')
                    list_response = requests.get(f'{INGESTOR_URL}/documents', timeout=10)
                    if list_response.status_code == 200:
                        docs_data = list_response.json()
                        print(f'  Total documents in system: {docs_data.get(\"total_documents\", 0)}')
                        documents = docs_data.get('documents', [])
                        print(f'  Recent documents: {[doc.get(\"document_name\", \"unknown\") for doc in documents[-3:]]}')
                    
                elif response.status_code == 422:
                    print(f'  Validation error: {response.text[:300]}...')
                elif response.status_code == 400:
                    print(f'  Bad request: {response.text[:300]}...')
                else:
                    print(f'  Error: {response.text[:300]}...')
                    
            except Exception as e:
                print(f'  Exception: {e}')
        
        # Check collection status
        try:
            print(f'\\n\\nChecking collection status...')
            collections_response = requests.get(f'{INGESTOR_URL}/collections', timeout=10)
            if collections_response.status_code == 200:
                collections_data = collections_response.json()
                print(f'Collections response: {collections_data}')
            else:
                print(f'Collections error: {collections_response.text[:200]}...')
        except Exception as e:
            print(f'Collections exception: {e}')
        
        # Check status endpoint
        try:
            print(f'\\nChecking status...')
            status_response = requests.get(f'{INGESTOR_URL}/status', timeout=10)
            if status_response.status_code == 200:
                status_data = status_response.json()
                print(f'Status response: {status_data}')
            else:
                print(f'Status error: {status_response.text[:200]}...')
        except Exception as e:
            print(f'Status exception: {e}')
        
        print('\\n=== Correct Format Test Complete ===')
        "
