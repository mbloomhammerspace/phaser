apiVersion: v1
kind: Pod
metadata:
  name: test-milvus-travel-search
spec:
  containers:
  - name: test-milvus
    image: python:3.12-slim
    command: ["/bin/bash"]
    args: ["-c", "pip install pymilvus && python3 << 'PYTHON_EOF'
from pymilvus import connections, utility, Collection
import json

try:
    print('Connecting to Milvus...')
    connections.connect('default', host='10.233.53.224', port=19530)
    print('✅ Milvus connection successful!')
    
    print('\\nListing all collections...')
    collections = utility.list_collections()
    print(f'Found {len(collections)} collections:')
    for i, name in enumerate(collections, 1):
        print(f'  {i}. {name}')
    
    # Find collections with 'case' in the name
    case_collections = [name for name in collections if 'case' in name.lower()]
    print(f'\\nFound {len(case_collections)} collections with \"case\" in name:')
    for name in case_collections:
        print(f'  - {name}')
    
    # Search for travel-related documents in case collections
    if case_collections:
        print('\\n🔍 Searching for travel-related documents in case collections...')
        travel_keywords = ['travel', 'receipt', 'destination', 'trip', 'flight', 'hotel', 'booking', 'itinerary', 'vacation', 'journey']
        
        for collection_name in case_collections:
            try:
                print(f'\\n--- Searching in collection: {collection_name} ---')
                collection = Collection(collection_name)
                collection.load()
                
                # Search for travel-related content
                for keyword in travel_keywords:
                    try:
                        # Create a simple text search (this is a basic example)
                        # In a real scenario, you'd use proper vector search
                        print(f'  Searching for: {keyword}')
                        # Note: This is a simplified search - actual implementation would use vector embeddings
                        print(f'    (Vector search for \"{keyword}\" would be performed here)')
                    except Exception as e:
                        print(f'    Error searching for {keyword}: {e}')
                        
            except Exception as e:
                print(f'  Error accessing collection {collection_name}: {e}')
    else:
        print('\\nNo collections with \"case\" found for travel search')
        
except Exception as e:
    print(f'❌ Milvus connection failed: {e}')

print('\\nTest completed!')
PYTHON_EOF
sleep 30
"]
  restartPolicy: Never
