apiVersion: v1
kind: Pod
metadata:
  name: live-progress-monitor
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: monitor
    image: python:3.9-slim
    command: ["sh", "-c"]
    args:
      - |
        pip install pymilvus
        python3 -c "
        from pymilvus import connections, utility
        import time
        import subprocess
        
        def get_live_progress():
            try:
                connections.connect('default', host='milvus', port='19530')
                from pymilvus import Collection
                
                # Get current document count
                c = Collection('all_pdfs')
                current_count = c.num_entities
                
                # Get latest processing status from logs
                try:
                    result = subprocess.run(['kubectl', 'logs', 'ingest-all-pdfs', '--tail=10'], 
                                          capture_output=True, text=True, timeout=15)
                    if result.returncode == 0:
                        lines = result.stdout.strip().split('\n')
                        latest_progress = 'No recent progress found'
                        for line in reversed(lines):
                            if 'Processed' in line and 'successful' in line:
                                latest_progress = line
                                break
                    else:
                        latest_progress = 'Could not fetch logs'
                except Exception as e:
                    latest_progress = f'Log fetch error: {str(e)[:50]}'
                
                print('=' * 60)
                print(f'LIVE INGESTION PROGRESS - {time.strftime(\"%H:%M:%S UTC\")}')
                print('=' * 60)
                print(f'ðŸ“Š Current Documents in all_pdfs: {current_count:,}')
                print(f'ðŸ“ˆ Latest Processing: {latest_progress}')
                print('=' * 60)
                
                # Calculate rough progress percentage
                total_files = 71825  # From our earlier count
                if 'Processed' in latest_progress:
                    try:
                        processed_part = latest_progress.split('Processed ')[1].split(' files')[0]
                        processed_num = int(processed_part.replace(',', ''))
                        percentage = (processed_num / total_files) * 100
                        print(f'ðŸ“‹ Files Processed: {processed_num:,} / {total_files:,} ({percentage:.1f}%)')
                    except:
                        pass
                
                print('=' * 60)
                
            except Exception as e:
                print(f'Error: {e}')
        
        get_live_progress()
        "
