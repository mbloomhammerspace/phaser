apiVersion: v1
kind: Pod
metadata:
  name: blueprint-health-check
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: health-check
    image: python:3.9-slim
    command: ["sh", "-c"]
    args:
      - |
        echo "üè• NVIDIA RAG Blueprint Health Check"
        echo "======================================================"
        echo ""
        
        # Install dependencies
        apt-get update -qq && apt-get install -y -qq curl jq > /dev/null 2>&1
        pip install pymilvus requests > /dev/null 2>&1
        
        OVERALL_HEALTH="HEALTHY"
        
        # Test 1: Milvus Vector Database
        echo "üìä Test 1: Milvus Vector Database"
        echo "   Endpoint: milvus:19530"
        python3 << 'PYEOF'
        from pymilvus import connections, utility, Collection
        import sys
        try:
            connections.connect('default', host='milvus', port='19530', timeout=5)
            collections = utility.list_collections()
            total_docs = 0
            for col_name in collections:
                c = Collection(col_name)
                total_docs += c.num_entities
            print(f"   ‚úÖ Milvus: HEALTHY")
            print(f"      - Collections: {len(collections)}")
            print(f"      - Total Documents: {total_docs:,}")
            print(f"      - Collections: {', '.join(collections[:3])}{'...' if len(collections) > 3 else ''}")
            sys.exit(0)
        except Exception as e:
            print(f"   ‚ùå Milvus: FAILED - {str(e)[:100]}")
            sys.exit(1)
        PYEOF
        MILVUS_STATUS=$?
        echo ""
        
        # Test 2: Embedding Service
        echo "üìù Test 2: Embedding Service"
        echo "   Endpoint: http://simple-embedding-2048:8000"
        EMBED_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 10 -X POST http://simple-embedding-2048:8000/v1/embeddings \
          -H "Content-Type: application/json" \
          -d '{"input": "test query", "model": "embed-qa-4"}' 2>/dev/null | tail -1)
        
        if [ "$EMBED_RESPONSE" = "200" ] || [ "$EMBED_RESPONSE" = "201" ]; then
            echo "   ‚úÖ Embedding Service: HEALTHY"
            echo "      - Endpoint responding with HTTP $EMBED_RESPONSE"
        else
            echo "   ‚ùå Embedding Service: FAILED (HTTP $EMBED_RESPONSE)"
            OVERALL_HEALTH="DEGRADED"
        fi
        echo ""
        
        # Test 3: NIM LLM Service
        echo "ü§ñ Test 3: NIM LLM Service"
        echo "   Endpoint: http://nim-llm-service:8000/v1/models"
        NIM_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 10 http://nim-llm-service:8000/v1/models 2>/dev/null | tail -1)
        
        if [ "$NIM_RESPONSE" = "200" ]; then
            echo "   ‚úÖ NIM LLM: HEALTHY"
            # Get model info
            NIM_MODELS=$(curl -s --max-time 5 http://nim-llm-service:8000/v1/models 2>/dev/null | jq -r '.data[].id' 2>/dev/null || echo "unknown")
            echo "      - Available Models: $NIM_MODELS"
            
            # Test generation
            echo "   üß™ Testing text generation..."
            GEN_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 15 -X POST http://nim-llm-service:8000/v1/completions \
              -H "Content-Type: application/json" \
              -d '{"model": "meta/llama3-8b-instruct", "prompt": "Say hello", "max_tokens": 10}' 2>/dev/null | tail -1)
            
            if [ "$GEN_RESPONSE" = "200" ]; then
                echo "      ‚úÖ Generation test: SUCCESS"
            else
                echo "      ‚ö†Ô∏è  Generation test: HTTP $GEN_RESPONSE"
            fi
        else
            echo "   ‚ùå NIM LLM: NOT READY (HTTP $NIM_RESPONSE)"
            echo "      Status: May still be initializing model"
            OVERALL_HEALTH="DEGRADED"
        fi
        echo ""
        
        # Test 4: Ingestor Service
        echo "üì• Test 4: Ingestor Service"
        echo "   Endpoint: http://ingestor-server:8082/v1/collections"
        INGESTOR_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 10 http://ingestor-server:8082/v1/collections 2>/dev/null | tail -1)
        
        if [ "$INGESTOR_RESPONSE" = "200" ]; then
            echo "   ‚úÖ Ingestor: HEALTHY"
            echo "      - Collections endpoint responding"
        else
            echo "   ‚ö†Ô∏è  Ingestor: HTTP $INGESTOR_RESPONSE"
        fi
        echo ""
        
        # Test 5: RAG Server
        echo "üîç Test 5: RAG Server"
        echo "   Endpoint: http://rag-blueprint-chain-server:8081/health"
        RAG_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 10 http://rag-blueprint-chain-server:8081/health 2>/dev/null | tail -1)
        
        if [ "$RAG_RESPONSE" = "200" ]; then
            echo "   ‚úÖ RAG Server: HEALTHY"
            RAG_INFO=$(curl -s --max-time 5 http://rag-blueprint-chain-server:8081/health 2>/dev/null)
            echo "      - Backend Status: $(echo $RAG_INFO | jq -r '.status' 2>/dev/null || echo 'ok')"
        else
            echo "   ‚ö†Ô∏è  RAG Server: HTTP $RAG_RESPONSE"
        fi
        echo ""
        
        # Test 6: Zipkin
        echo "üìä Test 6: Zipkin Tracing"
        ZIPKIN_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 5 http://zipkin:9411/api/v2/services 2>/dev/null | tail -1)
        if [ "$ZIPKIN_RESPONSE" = "200" ]; then
            echo "   ‚úÖ Zipkin: HEALTHY"
        else
            echo "   ‚ö†Ô∏è  Zipkin: HTTP $ZIPKIN_RESPONSE"
        fi
        echo ""
        
        # Test 7: Attu (Milvus UI)
        echo "üñ•Ô∏è  Test 7: Attu (Milvus UI)"
        ATTU_RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 5 http://attu:3000 2>/dev/null | tail -1)
        if [ "$ATTU_RESPONSE" = "200" ] || [ "$ATTU_RESPONSE" = "301" ] || [ "$ATTU_RESPONSE" = "302" ]; then
            echo "   ‚úÖ Attu: HEALTHY"
        else
            echo "   ‚ö†Ô∏è  Attu: HTTP $ATTU_RESPONSE"
        fi
        echo ""
        
        # Final Summary
        echo "======================================================"
        echo "üèÅ HEALTH CHECK SUMMARY"
        echo "======================================================"
        
        if [ $MILVUS_STATUS -eq 0 ]; then
            echo "‚úÖ Vector Database (Milvus): OPERATIONAL"
        else
            echo "‚ùå Vector Database (Milvus): FAILED"
            OVERALL_HEALTH="UNHEALTHY"
        fi
        
        echo "‚úÖ Embedding Services: OPERATIONAL"
        
        if [ "$NIM_RESPONSE" = "200" ]; then
            echo "‚úÖ NIM LLM Service: OPERATIONAL"
        else
            echo "‚ö†Ô∏è  NIM LLM Service: INITIALIZING/NOT READY"
            OVERALL_HEALTH="DEGRADED"
        fi
        
        if [ "$INGESTOR_RESPONSE" = "200" ]; then
            echo "‚úÖ Ingestor Service: OPERATIONAL"
        else
            echo "‚ö†Ô∏è  Ingestor Service: DEGRADED"
        fi
        
        if [ "$RAG_RESPONSE" = "200" ]; then
            echo "‚úÖ RAG Server: OPERATIONAL"
        else
            echo "‚ö†Ô∏è  RAG Server: DEGRADED"
        fi
        
        if [ "$ZIPKIN_RESPONSE" = "200" ]; then
            echo "‚úÖ Zipkin Tracing: OPERATIONAL"
        fi
        
        if [ "$ATTU_RESPONSE" = "200" ] || [ "$ATTU_RESPONSE" = "301" ] || [ "$ATTU_RESPONSE" = "302" ]; then
            echo "‚úÖ Attu Management UI: OPERATIONAL"
        fi
        
        echo ""
        echo "======================================================"
        echo "Overall System Status: $OVERALL_HEALTH"
        echo "======================================================"
        
        if [ "$OVERALL_HEALTH" = "HEALTHY" ]; then
            echo "üéâ System is ready for ingestion and queries!"
            exit 0
        elif [ "$OVERALL_HEALTH" = "DEGRADED" ]; then
            echo "‚ö†Ô∏è  System is partially operational"
            echo "   Some services may still be initializing"
            exit 0
        else
            echo "‚ùå System has critical failures"
            exit 1
        fi
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 250m
