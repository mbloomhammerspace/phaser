apiVersion: v1
kind: Pod
metadata:
  name: test-mcp-final
  namespace: default
spec:
  restartPolicy: Never
  containers:
  - name: test-final
    image: python:3.11-slim
    command: ["python3", "-c"]
    args:
      - |
        import requests
        import time
        import json

        def test_query(name, query, timeout=15):
            print(f'\n🧪 Testing: {name}')
            print(f'📤 Query: {query}')
            
            payload = {
                'messages': [{'role': 'user', 'content': query}],
                'collection_names': ['hammerspace_docs'],
                'use_knowledge_base': True
            }
            
            start_time = time.time()
            try:
                response = requests.post(
                    'http://rag-server:8081/v1/generate',
                    json=payload,
                    timeout=timeout,
                    headers={'Content-Type': 'application/json'}
                )
                
                end_time = time.time()
                response_time = end_time - start_time
                
                if response.status_code == 200:
                    result = response.json()
                    content = result.get('choices', [{}])[0].get('message', {}).get('content', '')
                    print(f'✅ Status: {response.status_code} | Time: {response_time:.2f}s')
                    print(f'📝 Response: {content}')
                    return True
                else:
                    print(f'❌ Status: {response.status_code} | Time: {response_time:.2f}s')
                    print(f'📝 Error: {response.text}')
                    return False
                    
            except requests.exceptions.Timeout:
                print(f'⏰ Timeout after {timeout}s')
                return False
            except Exception as e:
                print(f'💥 Exception: {e}')
                return False

        print('🚀 Starting MCP Test Framework')
        print('=' * 50)

        # Test greetings
        test_query('Simple Greeting', 'hey', 10)
        test_query('Another Greeting', 'hello', 10)
        test_query('Short Query', 'hi', 5)

        # Test MCP queries
        test_query('Document Count (Natural)', 'How many documents are in the vector database?', 15)
        test_query('Record Count (Alternative)', 'How many records are there in the vector database?', 15)
        test_query('Milvus Instance', 'How many documents are in the Milvus instance?', 15)
        test_query('List Collections', 'What collections are available in Milvus?', 15)

        print('\n🏁 Test Framework Complete!')
